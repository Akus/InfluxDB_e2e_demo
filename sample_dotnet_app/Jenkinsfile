pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "akosbodor/csharp-microservice:latest"
        KUBE_CONFIG = credentials('EKS_kubeconfig') // if using Jenkins credentials for kubeconfig
    }
    stages {
        stage('Install kubectl') {
            steps {
                sh '''
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mkdir -p $HOME/bin
                mv kubectl $HOME/bin/
                export PATH=$HOME/bin:$PATH
                kubectl version --client
                '''
            }
        }        
        stage('Check kubectl') {
            steps {
                sh '''
                export PATH=$HOME/bin:$PATH
                kubectl version --client
                '''                
            }
        }        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh """
                    echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
                    docker push $DOCKER_IMAGE
                    """
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                withCredentials([file(credentialsId: 'EKS_kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                    kubectl apply -f deployment.yaml
                    '''
                }
            }
        }
    }
}