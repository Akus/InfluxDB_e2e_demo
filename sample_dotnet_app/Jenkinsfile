pipeline {
    agent any    
    environment {
        DOCKER_IMAGE = "akosbodor/csharp-microservice:latest"
        KUBE_CONFIG = credentials('eks_kubeconfig') // if using Jenkins credentials for kubeconfig
    }
    stages { 
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                bat '''
                cd sample_dotnet_app
                docker build -t %DOCKER_IMAGE% .
                '''
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    bat '''
                    docker login -u %DOCKERHUB_USER% -p %DOCKERHUB_PASS%
                    docker tag %DOCKER_IMAGE% %DOCKER_IMAGE%
                    docker push %DOCKER_IMAGE%
                    '''
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    bat '''
                    cd sample_dotnet_app
                    aws eks update-kubeconfig --region eu-central-1 --name akos-influxdb-eks-development
                    kubectl config use-context arn:aws:eks:eu-central-1:123456789012:cluster/akos-influxdb-eks-development
                    kubectl get nodes
                    kubectl version
                    kubectl apply -f deployment.yaml
                    '''
                }
            }
        }
    }
}