pipeline {
    agent any
    environment {
        AWS_REGION = "eu-central-1" // Change to your AWS region
        ECR_REPO = "your-ecr-repo-name" // Change to your ECR repository name
        ECR_ACCOUNT = "123456789012" // Change to your AWS account ID
        DOCKER_IMAGE = "${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${GIT_TAG_NAME}"
    }
    triggers {
        // This will trigger the pipeline on new tags
        pollSCM('H/5 * * * *')
    }
    options {
        // Ensures that only builds for tags run the pipeline
        skipDefaultCheckout()
    }
    stages {
        stage('Checkout') {
            when {
                expression { env.GIT_TAG_NAME != null && env.GIT_TAG_NAME != '' }
            }
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            when {
                expression { env.GIT_TAG_NAME != null && env.GIT_TAG_NAME != '' }
            }
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }
        stage('Push to ECR') {
            when {
                expression { env.GIT_TAG_NAME != null && env.GIT_TAG_NAME != '' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        sh """
                        aws --version
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
                        docker push $DOCKER_IMAGE
                        """
                    }
                }
            }
        }
        stage('Deploy to EKS') {
            when {
                expression { env.GIT_TAG_NAME != null && env.GIT_TAG_NAME != '' }
            }
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                    # Replace image in the deployment.yaml before applying
                    sed -i "s|image:.*|image: ${DOCKER_IMAGE}|" deployment.yaml
                    kubectl apply -f deployment.yaml
                    '''
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}